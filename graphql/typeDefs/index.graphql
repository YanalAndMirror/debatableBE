# Custom Scalars
scalar Date

type Query {
  # Users
  users: [User]!
  user: User

  # Debates
  debates(
    order: String
    start: Int
    amount: Int
    tag: String
    keyword: String
    club: String
  ): [Debate]

  debate(slug: String!): DebateDetail
  clubs: Clubs
  club(slug: String!): ClubDetail
  rooms(
    order: String
    start: Int
    amount: Int
    tag: String
    keyword: String
  ): [Room]
  room(slug: String!): Room
  tags: [Tag]
  "Get arguments by debate or argue"
  argues(filter: ArgueFilter): [Argue]
}

type Mutation {
  "create a new user"
  signup(user: UserCreateInput!): userWithToken
  "update current user"
  updateUser(user: UserUpdateInput!): User
  "Sign in to user"
  signin(username: String!, password: String!): userWithToken
  "Mark all notifcations as seen"
  clearNotifications: User
  "Follow a debate"
  follow(debate: String!): User
  "unfollow a debate"
  unfollow(debate: String!): User
  "Create a new debate , with one main argue"
  createDebate(debate: DebateCreateInput!): Debate
  "Add 1 view to debate"
  addDebateView(debate: String): Debate
  "add a tage"
  addTag(title: String, photo: String): Tag
  "create a room"
  createRoom(room: RoomCreateInput!): Room
  roomStatus(slug: String, status: String): Room
  createClub(name: String, photo: String, inviteType: String): Club
  useInviteLink(inviteLink: String): Club
  joinClub(club: String): Club

  updateInviteLink(slug: String): ClubDetail
  removeFromClub(slug: String, user: String): Club

  updateDebate(id: ID!, debate: DebateUpdateInput!): Debate!
  addRoomVote(slug: String!, side: String!): Room
  # Arguements
  vote(argue: String, value: Int): Argue

  createArgue(argue: ArgueCreateInput!): Argue!
}
